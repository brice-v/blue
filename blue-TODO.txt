TODO:

- [ ] Support golang float with e in it
- [ ] Make core docs visible
    - [ ] Add docs for all remaining functions
- [ ] Add some sort of package management with a file like blue.json (or blue.toml)
    - This will allow us to also add a script runner
    - And by this time we can add a `blue init` command to generate the initial scaffolding
        - maybe allow it to accept some sort of template (or have options for type of project)
- [ ] Add serialization lib (optional path for kv to write it to file? like kv in deno)
- [ ] Add raylib bindings https://github.com/gen2brain/raylib-go
- [ ] Support range assignment for strings (so if the length of the range matches the length of the string to assign it wil work)
- [ ] Use swiss map if its better? https://github.com/dolthub/swiss
- [ ] Add select statement?
- [ ] Add range from python for quick loops
    - Use empty struct slice? (or way to yield values)
- [ ] See if we can add streams properly as its own object type?
    - Use go generator pattern maybe?
- [ ] Add plotting lib like matplot lib?
- [ ] Make `from` look more like js rather than python
- [ ] transform read and write to support using file descriptors instead?
- [ ] Add help strings for all builtins that start with underscore
- [ ] Decorators?
- [ ] Add filepath.walk type function
- [ ] Look to add the following libraries
    - https://github.com/gobwas/ws (for use in net/tcp ws lib)
    - https://github.com/playwright-community/playwright-go
    [-] https://github.com/huandu/xstrings
    [-] https://github.com/golang-module/carbon (partially added)
    - https://github.com/iancmcc/bingo
    - https://github.com/theckman/yacspin
    - https://github.com/cheynewallace/tabby
    - https://github.com/guptarohit/asciigraph
    - https://github.com/xhit/go-simple-mail
    - https://github.com/JoelOtter/termloop
    - https://github.com/youthlin/stream
    - https://github.com/go-echarts/go-echarts
    - https://github.com/gonum/plot
    - https://github.com/benhoyt/goawk
- [ ] Spread operator from JS
- [ ] Ensure destructuring works in more places (possibly update imports to work like they do in JS)
    - [ ] Aliasing for destructuring
- [ ] Replace println with just print and pass endln char to builtin (simplifies things a bit)
- STD Updates:
    - [ ] Add WebView
    - [ ] Add plotting library
    - [ ] Add ML Libs?
    - [ ] Server Side Events?
    - [ ] ECSDA support/ pub/priv keys? for crypto
    - [x] Date parsing code (this is one of the key missing areas at the moment as mentioned elsewhere in TODO)
    - [-] 2d game library - Started
    - [ ] 3d game library
    - [x] UUID somewhere
    - [ ] TUI (charm.sh?) - maybe even tui game lib?
    - [ ] Selenium/Playright integration?
    - [ ] Video/Audio library
- [ ] DNS resolver function? like the dig cmd
- [ ] Fix up bundler so that if it has the source, it git pulls first
- [ ] Make a blue ide/play command that starts a gui to mess with the language (possibly starts a server with basic site that could be hosted?)
    - [ ] Accept subcmd for gui/browser that specifies what you want to do
- [ ] Move std lib maps into their own files - just to organize things
- [ ] Make WS Conn work on net connection?
- [ ] Add `test` keyword and command to run tests inline with code, similar to zig/rust
    - Also add `blue test` command to specify file or maybe just run everything
- [ ] Add abs_path function for a file that exists? otherwise throw error
- [ ] Store doc comments above var/val statements?
- [ ] add to_fixed() similar to js
- [ ] Add formatting options for string interpolation?
- [ ] open syscall?
- [ ] make `wait` allow you to return values to process calling `wait`
- [ ] add helper to quit/exit pid?
- [ ] make process errors bubble up if they are waited on?
- [ ] add supervisor builtin which can restart a pid if it errors out (this can all be done in go)
- [ ] allow docs to be served/transformed to md or html
- [ ] debugger that breaks out into repl
    - debugger statement that pops user into repl with access to variables (then just need a way to exit repl and continue execution)
- still want to have way of starting a blue process like Erlang/Elixr with ways to connect and send over the network, etc.
- in children, see if we can bind and convert strings to label with binding?
- [ ] Day 11 part 2 aoc2022 might be good to use as a benchmark
- [push to 2 repos at once](https://stackoverflow.com/questions/5620525/git-pushing-to-two-repos-in-one-command)
- `go clean -testcache && go test ./...`
- `go test -cpuprofile cpu.prof -memprofile mem.prof .` (. is the directory)
- `go tool pprof -http localhost:9999 cpu.prof` (or mem.prof)
- Or use this below to test out individual runs
```
package main

import (
	"blue/cmd"
	"os"

	"github.com/mmcloughlin/profile"
)

func main() {
	defer profile.Start(profile.CPUProfile, profile.MemProfile).Stop()
	cmd.RunAgentIfEnabled()
	cmd.Run(os.Args...)
	os.Exit(0)
}

```
- [ ] Add test cases to cover all the basic functions
- [ ] sort builtin
    - reverse as well, or easy way to reverse sort, plus way where function is provided to compare
- [ ] Add time related functions (and expand stdlb)
- [ ] remove need for parens in for loop and if statments? - removing it feels more like go, keeping it is more 'C' like
- [ ] Allow user defined operators so that a dsl can be defined easily (think like lua/ruby)
- [ ] Fix STDIN write and reading
    - [ ] Make sure STDOUT and STDERR are working as expected
- [ ] Add variadic arguments (...)
- [ ] Include shift operators and assignment expressions to other types
- [ ] Support regex literal in parser and evaluator
    - Might just use a syntax such as `re"[0-9]+"`
- [ ] Support string interpolation helper to print out objects
    - in above #{=VAR} will return a string with the VARNAME = VAR_AS_STRING
    - [ ] Add debug printing that works like ic to evaluator
        - This is sort of related

LATER ON:

- [ ] See if we can add go -coverage for tests (including the b_test_programs dir)
    - Try to get coverage as high as we can
- [ ] Performance testing and high level optimizations first
    - Then try to optimize further (we can still obviously use a VM if we wanted to)
- [ ] Add code for CLI arg parser
- [ ] Support unicode throughout
- [ ] TESTS! Lots of them covering a variety of scenarios
    - Test all math casting and max and min working
    - Test lists with variety of data types
    - Test maps with all types
    - Test hashing and equality works on objects with lots of different types
    - Write some more internal tests in go to cover other variety of things
    - parser tests for newly added objects
- [ ] Add way to print out ast by node name rather than strings
- [ ] Look into the performance benefits of different hashing algorthims
- [ ] Look into the performance benefits of enum of types rather than strings
- [ ] Fix all Math functions that are currently lossy due to conversion
    - Just fix them in general (make it strongly typed so the user has to force lossiness if thats desired)
- [ ] Think about compiling to go
    - Still could try this out - but definitely a future thing
- [ ] Tagged Unions/ enums working properly with match
- [x] Using `` to call cmd on computer - returning the output of that command
    - [ ] Add support for piped output

COMPLETED TASKS:

- [-] Get wasm stuff running and working (include wasm_exec.js in lib/web if necessary) wazero is what I was using (wasi_preview1 is available now via go)
    - [x] Make sure we support wasi_preview1
        - Only really supporting wasi_preview1 go and tinygo (tinygo can essentially make a lib - couldnt get zig to work)
    - [x] Support via default vars to the init function what we want to allow? maybe sensible defaults? or just all
    - [ ] Support Memory limits?
    - [ ] Shared var between the 2?
    - [ ] Passing variables back and forth? Maybe strings if possible?
    - [x] Figure out how to close it/deallocate the runtime
    - Mostly working for now
- [x] BUG: I think if theres an in expression within a for expression it may be getting the wrong nest level?
- [-] Make main function use args given to it as flags
    - Default help
    - Call main by default?
- [x] Support bundling gg files
    - need to append "embed_files/" to the path probably
- [x] Add water.css (or other basic styled css files) to lib/web
- [-] Try the env copy idea with more tests running or more functions running specifically
    - Spawn seems to like the way things are currently done
- [x] Probably need to fix how builtins work for std as they wont have the correct evaluator necessarily given to them
- [x] reduce contention in gos.go
    - Updated by using GO_OBJs instead for most things there
- [-] go struct to blue map helper function?
    - Not as practical as I originally thought so just using GO_OBJ where needed or MAPs
- [-] Remove uints from working with big floats and ints
    - What does this mean? Ignoring this
- [-] Need way to call go code directly while running (use a go interpreter? or compile on the fly?)
    - Not going to implement
- [x] Add http new_server (or something like that) that returns a server object with appropriate methods
    - Leave the default one still in place
    - Make sure this works with ctrl+c for exiting it
- [x] Support n at the end of integer for big int, nf for big float
    - n for float as well and it just needs a . in it which makes more sense than nf
- [x] Support u in front of 10 based integer to allow unsigned integers created via another method than 0x 0o 0b (maybe 0u if thats easier)
- [x] Support X - (Y/2) thing correctly, this was actually doing something weird where it multiplied by -1 essentially?
    - This was actually a bug in the evaluator that I had put a note on, turns out it was incorrect from the beginning
- [x] Add defer expression that works kind of like spawn
    - However, it should work at the end of a scope block
- [-] Add ebiten game engine
    - Not going to do this, instead going to add raylib probably
- [-] Hook in esbuild to do transpiling?
    - Not going to do this for now
- [-] Make a filepath based router?
    - Not going to do this for now
- [x] Colorize Help output (if not NO_COLOR) and use tabular output to get padding correct
- [x] Add middleware for http framework
    - Still in progress
- [x] Fix HTTP handler errors so that they include the error message in the JSON if an error occurs inside it
- [x] Add $id to repl like its done in jshell
- [x] FEAT: If any errors happen in an http handler log to stdout? the same way we'd do a normal error (with return trace)
    - Added this to getErrorTokenTraceAsJson which checks if DISABLE_HTTP_SERVER_DEBUG is disabled or not
- [x] BUG: Cant reassign immutables when inside of try-catch in for loop
- [x] DONE: Issue was with how we handle default args/params/ and args
    val query_to_execute = "select * from pdf_index_fts where pdf_index_fts match ? order by rank limit 10;";
    # TODO: Fix issue where if I didnt type 'query_args=', this would not work
    val result = db_conn.query(query_to_execute, query_args=[q])
- [x] Make sure equality will check bytes slices as well because test_db.b is passing even tho blob isnt being checked
    - DONE: this was working but rather a bug with the testing process (false in an if statement needs to returned)
- [x] Fix PDF to text to not panic as much, have to pull it into local modules
    - This doesnt work so I've removed it
- [x] Add ability to interact with req/ctx from http req - add get res.code for status codes too if possible
- [x] Feature: If user returns a map in http handler call, try to convert to json by default? (look at processHandlerFn)
    - If the value cant be converted then return the normal error for expected STRING or NULL (or JSON MAP)
    - [x] Specifically only implemented for GET call but maybe we want it for POST/PUT/PATCH/DELETE calls as well?
- [x] BUG: If user submits a default value in call expression that we dont expect, dont panic, instead return error
- [-] Feature: Add inspect method to check ws conn details (what about other http stuff?)
    - Just added the basic things that net uses as well
- [x] Feature: Add !, &&, || as operators (just makes it easier overall)
- [-] Finish up wasm implementation once wazero is 1.0
    - [-] Need to be able to call easily (like its from js)
    - Not going to do this for now
- [x] read/write for byte buffer? (allow writing bytes - need easy syntax there)
    - This is done, as_bytes=true to read to bytes, or write with bytes
- [x] Allow bundler to specify files/directory and allow them to be opened when called in the embedded context
    - this will also help with things like http.static() - and serving files from embedded dir
    - DONE: We copy all files from the current dir to an embedded dir which makes them accessible to open, read, etc.
- [x] colorize terminal outputs for errors and other things like that
    - Should mostly be done
- [-] remove lambda or make it easier to use
    - They were made slightly easier to use by no longer requiring curly braces on single line
- [-] Make sure continue works with for (x in y) where y is set/list/map
    - Seems to work fine
- [-] Use struct{} for set implmentation
    - Not going to do for now
- [-] Add macro system from monkey
    - Not going to do this for now
- [x] `this` keyword for map object?
    - Not needed because func can use this map inside it
- [x] Make assignment not work with maps that are initially declared as 'val'
    - This was a bug - now fixed
- [-] Should we pass in current env when spawning? It would allow globals declared before hand to be copied but not updated
    - We currently extend the current env wherever the function is spawned
- [x] Remove createProcess function if it ends up being simple (like it is currently)
- [-] Think about adding types
    - At this stage, probably not
- [x] Think about adding channels, receivers, using the golang scheduler
    - [x] Use Context package with parallel code, should help close out channels
        - channels now closed when the process closes (we need to keep it open in case a message is sent to a pid)
- [x] Add parser errors anywhere we are returning nil
    - [x] Eventually this should be able to point to the location via the token's location
- [x] Add docstrings
    - [x] Add help() function to get the doc string for any public object in the Environment
- [-] We then probably need some wait groups and other concurrent features to make everything nicer
    - also we need to consider when processes are loaded on other computer hosts
    - implemented `wait`
- add way to convert numbers to different formats (possibly for printing?)
    - [x] sort of done now that we can convert between all numeric types
- Make templating system actually work well, or have some builtin to automatically return an elem but continue execution?
- NOTE: `send()` will block if nothing is recveiving on it (maybe this is okay?)
    - We could maybe optimize this with a buffered channel
- [x] Support TUI and colors for printing in terminal (and any other special things)
    - we got colors but nothing else at the moment
- [x] FIX: Make sure that default args are being called correctly with some partial args given
    - look at color.style function and the way it could be called for different scenarios
- [x] BUG: continue at the end of for loop caused that to return in function? - instead of explicit return
- [x] Implement `import *` from file so we dont need to use package name
- [x] Make it so that help() will return custom value for custom functions (via comments)
    - return static strings for HelpStr's that dont change and store it in another file like object.STRING_OBJ is setup
- [x] For errors in handler functions in http - allow the stacktrace/error to be printed in the c.Status... stuff if there is an env variable set
- [x] Make repl better
- [x] Make CLI behavior better (need an alternative to 'flag' package)
    - [x] Update repl to support loading files, saving files, help, etc. (look at node repl)
- [-] Fix closures (possibly due to below error)
    - This is another thing due to extendFunctionEnv that we'll keep as is.
    - eventually having 'this' in a map may fix this (or 'self')
- [-] Global var does not respect assignment ops when set inside function?
    - Will consider this as part of the expected behavior (it can only enclose on an env once - so its always using the inital vars)
- [x] Support not importing functions or variables that start with _
- [x] Support proper scopes
- [x] Add continue, break
- Add builtins for is_file, is_dir, find_exe
- Make x[1..3] or x[1..<3] work with lists, sets, strings, etc.
- [-] Add more http methods to stdlib (and expand upon stdlib work)
- [x] Add code for http server
- [x] Add code for UI
- [-] Also need to figure out how were closing the channels after being used and non-buffered vs buffered channels
- [-] Use send in recv() match block to make sure we can send and recv without issue (maybe in a for loop)
    - [x] Will need to update SpawnExpression to support passing args such as the pid to send back to
- [x] Make sure send is non-blocking and recv is blocking
- add filename (with abs path) to token so that we can get the exact line
    - then GetErrorLineMessage wont have to live in lexer (and we can print errors elsewhere)
- [x] Make sure self works inside the spawned process
- [x] Fix hashing of True, False, Null. These should probably just return a 0, 1, 2 (or whatever) 
- [x] Add way to get types of objects inside code
- [x] support index operator for set so we can do something like `set_abc.1` or `set_abc[1]` to get 2nd element
    - cant fix this until sets are in order (otherwise its unfriendly to use)
- [x] Fix set literals so that they are always in order
- [x] Support `else if` expression
- [x] Allow any function to use the dot call function syntax
- [x] (Bug) Fix variable shadowing, I was able to do val x = 123; var x = 1234; (x is immutable)
    - Shadowing is allowed for 'var' statements and when going from var->val but not the other way around
- [x] Add file to current environment
- [x] (Bug) Handle Comment inside for loop? - multiline comment was giving me issues
- [x] Implement try-catch similar to js
- [x] Make Val statements work to make immutable objects
    - see if they can work inside objects to make certain items immutable?
- [-] Add ARGV, STDOUT, STDIN, STDERR, write, etc. (other os operations)
    - These are pretty much implemented in a basic fashion
- [x] Make `in` expression on map go in order of insertion
    - [-] Rearchitect Map object to include slice of objects (with hashkey)
        - This can then be used to range in order but there is a lot of rearchitecting to do
    - This was solved by sorting on hashkey when doing the 'in' expression
- [x] Add list, map, set, etc. comprehensions to the parser and evaluator
    - [x] List comprehensions (basically done and working)
- [x] Support `in` keyword for ranges and iterable items
    - [-] Make it possible to unpack a list, map, set, etc. using the for (VARS in OBJECT) syntax
        - where VARS can be a tuple of variable declarations that would signify the unpacking
        - [x] for (indx, elem in LIST/SET/etc.) {}
        - [x] for (key, value in MAP/OBJ) {}
- [x] (Bug) Fix lexing to identify issue when string is not escaped inside another string (such as in a stringinterp object)
- [x] Figure out how importing will work - might be similar to zig
- [x] Default to running the evaluator when the binary is used
- [x] Fix all set operations
- [-] Make operators work with sets, maps/objects, lists, etc.
    - ie. [1 , 2, 3, 4] | [ 1, 2, 3] == [1,2,3,4] (union)
    - [1, 2, 3, 4] ^ [1,2,3] == [4] (symmetric difference)
    - [1,2,3,4] & [1,2,3] == [1,2,3] (intersection)
    - [1,2,3,4] >= [1,2] == TRUE (left is superset of right)
    - [1,2,3,4] <= [1,2] == FALSE (left is subset of right (in this case false))
    - set() as a function on list - this ensures unique values only
    - DONE: [1,2,3,4,5] + [1,23] == [1,2,3,4,5,1,23]
    - all the operators should support the object types
    - MARKING THIS AS IN PROGRESS AND MOVING TO BOTTOM
        - Most of this is currenly being implmemented but its not working yet and this is getting in the way and i know the operations to support now
- [x] Support math functions between types but cast to something that makes sense
    - This is currently being worked on - will move when done
- [x] Implement all combinations of math functions with the casting of big floats and ints
- [x] Add match expression support to parser (make a string method or whatever it needs)
- [x] Implement parser string method for null
- [x] Implement parser string method for match expression
- [x] Include "Big" objects for float and int
- [x] Implement hashing of all other types using HashObject Function
    - DONE: for now until more types are added
- [x] Make sure ranges work as expected
- [x] Add eval support for `for` expressions
- [-] Update string function for function literal
- [-] Fix string printing on Inspect method
    - Going to leave this alone as their are places where it doesnt make sense to include the quotes
- [-] Possibly support calling convention of first argument passed to a function can be before a . then the call
    - ie. fun add(a, b) { a + b } | To call this we could do  `6.add(4)` (ideally)
    - maybe it will only work with identifiers but this should be supported
    - Not able to be supported at the moment due to the way the parser works, will try with builtin functions
- [x] Allows Non hash key items to be return a hashkey but not be used as a key in an object
    - Even though it could be possible im not sure if this is how i want the language to work
- [x] Support operators for string such as +, *, |, ^ (maybe only the first two)
- [x] Add single line (and maybe multiline) comments to lexer, parser?, evaluator?
- [x] Support default argument value in parser and evaluator
    - ie. fun(a = 10, b = "Some String") {
              println("a's default value is #{=a} and b's default value is #{=b}")
          }
- [x] May want to add hash key to other objects like list, and map literals
- [x] Read below commit message to follow up with default parameters in functions
    ```
    blang: parser: parse default arguments as ast.AssignmentExpression
        
        We now need to create a new field for the function literal to store
        these and the parseFunctionParameter function can return both as a
        tuple.
        
        With that the evaluator can then set the environment to use these.
        
        Still need to figure out how to have a call expression use either
        default or given if it is given them.
    ```
- [x] Propgate errors correctly
- [x] Add assignment expressions an ast node so that they can be evaluated
    - p.s lambdas just work now!
- [x] Support math operators between floats
- [x] Support math and bin operators between hex, octal, bin
- [x] Add boolean operators for `and` and `or`
- [x] Add eval support for lambdas
- [x] Make sure evaluator can use maps/objects the way that is expected
- [x] Make sure string interpolation works
- [x] Make sure var statements can be rebound
    - [-] Support all assignment expressions
- [x] Make sure val statements can not be reassigned
    - Need to figure out what to do with their children, maybe they just get a flag