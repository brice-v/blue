TODO:

- add way to convert numbers to different formats (possibly for printing?)
- debugger statement that pops user into repl with access to variables (then just need a way to exit repl and continue execution)
- still want to have way of starting a blue process like Erlang/Elixr with ways to connect and send over the network, etc.
- in children, see if we can bind and convert strings to label with binding?
- [ ] Day 11 part 2 aoc2022 might be good to use as a benchmark
- [-] Make sure continue works with for (x in y) where y is set/list/map
    - Seems to work fine
- Make templating system actually work well, or have some builtin to automatically return an elem but continue execution?
- NOTE: `send()` will block if nothing is recveiving on it (maybe this is okay?)
    - We could maybe optimize this with a buffered channel
- [push to 2 repos at once](https://stackoverflow.com/questions/5620525/git-pushing-to-two-repos-in-one-command)
- `go clean -testcache && go test ./...`
- `go test -cpuprofile cpu.prof -memprofile mem.prof .` (. is the directory)
- `go tool pprof -http localhost:9999 cpu.prof` (or mem.prof)
- [ ] We then probably need some wait groups and other concurrent features to make everything nicer
    - also we need to consider when processes are loaded on other computer hosts
- [ ] Remove createProcess function if it ends up being simple (like it is currently)
- [ ] Should we pass in current env when spawning? It would allow globals declared before hand to be copied but not updated
- [ ] Add test cases to cover all the basic functions
- [ ] sort builtin
    - reverse as well, or easy way to reverse sort, plus way where function is provided to compare
- [ ] Add time related functions (and expand stdlb)
- [ ] remove lambda or make it easier to use
- [ ] remove need for parens in for loop and if statments? - removing it feels more like go, keeping it is more 'C' like
- [ ] Allow user defined operators so that a dsl can be defined easily (think like lua/ruby)
- [ ] Add docstrings
    - [ ] Add help() function to get the doc string for any public object in the Environment
- [ ] Fix STDIN write and reading
    - [ ] Make sure STDOUT and STDERR are working as expected
- [ ] Add parser errors anywhere we are returning nil
    - [x] Eventually this should be able to point to the location via the token's location
- [ ] Add variadic arguments (...)
- [ ] Use struct{} for set implmentation
- [ ] Remove uints from working with big floats and ints
- [ ] Include shift operators and assignment expressions to other types
- [ ] Support regex literal in parser and evaluator
    - Might just use a syntax such as `re"[0-9]+"`
- [ ] Add macro system from monkey
- [ ] Support string interpolation helper to print out objects
    - in above #{=VAR} will return a string with the VARNAME = VAR_AS_STRING
    - [ ] Add debug printing that works like ic to evaluator
        - This is sort of related
- [ ] Implement `import *` from file so we dont need to use package name
- [ ] `this` keyword for map object?
- [ ] Need way to call go code directly while running (use a go interpreter? or compile on the fly?)

LATER ON:

- [ ] Support TUI and colors for printing in terminal (and any other special things)
- [ ] Add code for CLI arg parser
- [ ] Support unicode throughout
- [ ] TESTS! Lots of them covering a variety of scenarios
    - Test all math casting and max and min working
    - Test lists with variety of data types
    - Test maps with all types
    - Test hashing and equality works on objects with lots of different types
    - Write some more internal tests in go to cover other variety of things
    - parser tests for newly added objects
- [ ] Add way to print out ast by node name rather than strings
- [ ] Look into the performance benefits of different hashing algorthims
- [ ] Look into the performance benefits of enum of types rather than strings
- [ ] Add `test` keyword and command to run tests inline with code, similar to zig/rust
- [-] Fix all Math functions that are currently lossy due to conversion
    - In progress...
- [ ] Think about adding types
- [ ] Think about compiling to go
- [x] Think about adding channels, receivers, using the golang scheduler
    - [ ] Use Context package with parallel code, should help close out channels
- [ ] Tagged Unions/ enums working properly with match
- [x] Using `` to call cmd on computer - returning the output of that command
    - [ ] Add support for piped output

COMPLETED TASKS:

- [x] Make it so that help() will return custom value for custom functions (via comments)
    - return static strings for HelpStr's that dont change and store it in another file like object.STRING_OBJ is setup
- [x] For errors in handler functions in http - allow the stacktrace/error to be printed in the c.Status... stuff if there is an env variable set
- [x] Make repl better
- [x] Make CLI behavior better (need an alternative to 'flag' package)
    - [x] Update repl to support loading files, saving files, help, etc. (look at node repl)
- [-] Fix closures (possibly due to below error)
    - This is another thing due to extendFunctionEnv that we'll keep as is.
    - eventually having 'this' in a map may fix this (or 'self')
- [-] Global var does not respect assignment ops when set inside function?
    - Will consider this as part of the expected behavior (it can only enclose on an env once - so its always using the inital vars)
- [x] Support not importing functions or variables that start with _
- [x] Support proper scopes
- [x] Add continue, break
- Add builtins for is_file, is_dir, find_exe
- Make x[1..3] or x[1..<3] work with lists, sets, strings, etc.
- [-] Add more http methods to stdlib (and expand upon stdlib work)
- [x] Add code for http server
- [x] Add code for UI
- [-] Also need to figure out how were closing the channels after being used and non-buffered vs buffered channels
- [-] Use send in recv() match block to make sure we can send and recv without issue (maybe in a for loop)
    - [x] Will need to update SpawnExpression to support passing args such as the pid to send back to
- [x] Make sure send is non-blocking and recv is blocking
- add filename (with abs path) to token so that we can get the exact line
    - then GetErrorLineMessage wont have to live in lexer (and we can print errors elsewhere)
- [x] Make sure self works inside the spawned process
- [x] Fix hashing of True, False, Null. These should probably just return a 0, 1, 2 (or whatever) 
- [x] Add way to get types of objects inside code
- [x] support index operator for set so we can do something like `set_abc.1` or `set_abc[1]` to get 2nd element
    - cant fix this until sets are in order (otherwise its unfriendly to use)
- [x] Fix set literals so that they are always in order
- [x] Support `else if` expression
- [x] Allow any function to use the dot call function syntax
- [x] (Bug) Fix variable shadowing, I was able to do val x = 123; var x = 1234; (x is immutable)
    - Shadowing is allowed for 'var' statements and when going from var->val but not the other way around
- [x] Add file to current environment
- [x] (Bug) Handle Comment inside for loop? - multiline comment was giving me issues
- [x] Implement try-catch similar to js
- [x] Make Val statements work to make immutable objects
    - see if they can work inside objects to make certain items immutable?
- [-] Add ARGV, STDOUT, STDIN, STDERR, write, etc. (other os operations)
    - These are pretty much implemented in a basic fashion
- [x] Make `in` expression on map go in order of insertion
    - [-] Rearchitect Map object to include slice of objects (with hashkey)
        - This can then be used to range in order but there is a lot of rearchitecting to do
    - This was solved by sorting on hashkey when doing the 'in' expression
- [x] Add list, map, set, etc. comprehensions to the parser and evaluator
    - [x] List comprehensions (basically done and working)
- [x] Support `in` keyword for ranges and iterable items
    - [-] Make it possible to unpack a list, map, set, etc. using the for (VARS in OBJECT) syntax
        - where VARS can be a tuple of variable declarations that would signify the unpacking
        - [x] for (indx, elem in LIST/SET/etc.) {}
        - [x] for (key, value in MAP/OBJ) {}
- [x] (Bug) Fix lexing to identify issue when string is not escaped inside another string (such as in a stringinterp object)
- [x] Figure out how importing will work - might be similar to zig
- [x] Default to running the evaluator when the binary is used
- [x] Fix all set operations
- [-] Make operators work with sets, maps/objects, lists, etc.
    - ie. [1 , 2, 3, 4] | [ 1, 2, 3] == [1,2,3,4] (union)
    - [1, 2, 3, 4] ^ [1,2,3] == [4] (symmetric difference)
    - [1,2,3,4] & [1,2,3] == [1,2,3] (intersection)
    - [1,2,3,4] >= [1,2] == TRUE (left is superset of right)
    - [1,2,3,4] <= [1,2] == FALSE (left is subset of right (in this case false))
    - set() as a function on list - this ensures unique values only
    - DONE: [1,2,3,4,5] + [1,23] == [1,2,3,4,5,1,23]
    - all the operators should support the object types
    - MARKING THIS AS IN PROGRESS AND MOVING TO BOTTOM
        - Most of this is currenly being implmemented but its not working yet and this is getting in the way and i know the operations to support now
- [x] Support math functions between types but cast to something that makes sense
    - This is currently being worked on - will move when done
- [x] Implement all combinations of math functions with the casting of big floats and ints
- [x] Add match expression support to parser (make a string method or whatever it needs)
- [x] Implement parser string method for null
- [x] Implement parser string method for match expression
- [x] Include "Big" objects for float and int
- [x] Implement hashing of all other types using HashObject Function
    - DONE: for now until more types are added
- [x] Make sure ranges work as expected
- [x] Add eval support for `for` expressions
- [-] Update string function for function literal
- [-] Fix string printing on Inspect method
    - Going to leave this alone as their are places where it doesnt make sense to include the quotes
- [-] Possibly support calling convention of first argument passed to a function can be before a . then the call
    - ie. fun add(a, b) { a + b } | To call this we could do  `6.add(4)` (ideally)
    - maybe it will only work with identifiers but this should be supported
    - Not able to be supported at the moment due to the way the parser works, will try with builtin functions
- [x] Allows Non hash key items to be return a hashkey but not be used as a key in an object
    - Even though it could be possible im not sure if this is how i want the language to work
- [x] Support operators for string such as +, *, |, ^ (maybe only the first two)
- [x] Add single line (and maybe multiline) comments to lexer, parser?, evaluator?
- [x] Support default argument value in parser and evaluator
    - ie. fun(a = 10, b = "Some String") {
              println("a's default value is #{=a} and b's default value is #{=b}")
          }
- [x] May want to add hash key to other objects like list, and map literals
- [x] Read below commit message to follow up with default parameters in functions
    ```
    blang: parser: parse default arguments as ast.AssignmentExpression
        
        We now need to create a new field for the function literal to store
        these and the parseFunctionParameter function can return both as a
        tuple.
        
        With that the evaluator can then set the environment to use these.
        
        Still need to figure out how to have a call expression use either
        default or given if it is given them.
    ```
- [x] Propgate errors correctly
- [x] Add assignment expressions an ast node so that they can be evaluated
    - p.s lambdas just work now!
- [x] Support math operators between floats
- [x] Support math and bin operators between hex, octal, bin
- [x] Add boolean operators for `and` and `or`
- [x] Add eval support for lambdas
- [x] Make sure evaluator can use maps/objects the way that is expected
- [x] Make sure string interpolation works
- [x] Make sure var statements can be rebound
    - [-] Support all assignment expressions
- [x] Make sure val statements can not be reassigned
    - Need to figure out what to do with their children, maybe they just get a flag